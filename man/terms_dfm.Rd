% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/term-extract.R
\name{terms_dfm}
\alias{terms_dfm}
\title{Create a document-feature-matrix from a text source}
\usage{
terms_dfm(textData, textColumn, documentIdColumn,
  removeStopwords = FALSE, removeNumbers = FALSE,
  wordStemming = FALSE, customStopwords = c())
}
\arguments{
\item{textData}{a dataframe containing the text to be processed, with each
row representing a distinct document}

\item{textColumn}{the column name in \code{textData} containing the text to
be processed}

\item{documentIdColumn}{the column name in \code{textData} specifying a
unique identifier for the document with the content given in
\code{textColumn}}

\item{removeStopwords}{a Boolean indicating whether standard stopwords (see
\code{\link[tidytext:stop_words]{tidytext}}) should be removed from the
result; default is \strong{FALSE}.}

\item{removeNumbers}{a Boolean indicating whether numbers should be removed
from the result; default is \strong{FALSE}. If \strong{TRUE}, a the Porter
stemmer from the \code{\link[SnowballC:wordStem]{SnowballC package}} is
applied.}

\item{wordStemming}{a Boolean indicating whether words in the text should be
reduced to the word stem; default is \strong{FALSE}.}

\item{customStopwords}{a character vector specifying additional stopwords
that should be removed from the result}
}
\value{
a \emph{document-feature-matrix} of type
\code{\link[quanteda:dfm]{quanteda::dfm}} (similar to a
document-term-matrix), where a \emph{document} is identified by the value
in the \code{documentIdColumn} specified in the text source (i.e.
\code{textData}), and a \emph{feature} or \emph{term} is a character
sequence obtained after tokenization and all other NLP processing options
have been applied to the text associated with a document.
}
\description{
\code{terms_dfm} takes a text source with text objects associated with unique
document identifiers and creates a document-feature-matrix, which can be used
as input for an \code{\link[stm:stm]{stm}} topic modeller.
}
\details{
Text input (\code{textColumn}) is split with a \emph{word tokenizer} and
tokens are further processed and filtered according to the function's
options. Since the result is primarily intended as input for a topic
modeller, stopwords (see \code{\link[tidytext:stop_words]{tidytext}}) are
\strong{not} removed by default.
}
